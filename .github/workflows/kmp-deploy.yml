name: KMP Deploy from Bitbucket

on:
  workflow_dispatch:
    inputs:
      ios_lane:
        description: "Fastlane lane for iOS (beta or release)"
        required: true
        default: "beta"
      android_lane:
        description: "Fastlane lane for Android (beta or release)"
        required: true
        default: "beta"
  push:
    branches: [main]

env:
  CI_PROVIDER: GITHUB
  PROJECT_ROOT_DIR: "./SiteBuilderMobile"
  S3_BUCKET_NAME: imal-apk-bucket
  GRADLE_OPTS: "-Xmx4g -Dorg.gradle.jvmargs='-Xmx4g -XX:MaxMetaspaceSize=1g'"

jobs:
  deploy:
    runs-on: macos-14
    timeout-minutes: 60
    steps:

      # 0. Debug: Show available Xcode versions and switch to 16.x
      - name: Show available Xcode versions
        run: ls /Applications | grep Xcode

      - name: Select Xcode 16.x
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app
          xcodebuild -version

      # 0.1. Print build context for traceability
      - name: Print Build Context
        run: |
          echo "=============================="
          echo "Starting KMP Deploy Workflow"
          echo "Branch: ${{ github.ref_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Android Lane: ${{ github.event.inputs.android_lane || 'beta' }}"
          echo "iOS Lane: ${{ github.event.inputs.ios_lane || 'beta' }}"
          echo "Project Root: $PROJECT_ROOT_DIR"
          echo "S3 Bucket: $S3_BUCKET_NAME"
          echo "=============================="

      # 1. Set up SSH and clone Bitbucket repo
      - name: Setup SSH for Bitbucket
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BITBUCKET_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts

      - name: Clone Bitbucket Repository
        run: |
          git clone git@bitbucket.org:azentio-software/site-builder-execution.git
          mv site-builder-execution/SiteBuilderMobile SiteBuilderMobile

      # 2. Decode Android keystore for signing
      - name: Decode Keystore
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > testdeploy.keystore
          echo "Keystore decoded at root (testdeploy.keystore)"


      # 2.1. Set up Android + Fastlane environment
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane
        run: gem install fastlane

      - name: Ensure AWS CLI is Installed
        run: |
          if ! command -v aws &> /dev/null; then
           brew install awscli
          else
           echo "AWS CLI already installed"
          fi

      # 3. Gradle clean
      - name: Clean Project
        run: ./SiteBuilderMobile/gradlew clean -p SiteBuilderMobile -b build.gradle.kts

      # 3.1. Echo Android build info
      - name: Log Android Build Context
        run: |
          echo "=============================="
          echo "Android Build Information"
          echo "Fastlane Lane: ${{ github.event.inputs.android_lane || 'beta' }}"
          echo "Gradle JVM Args: $GRADLE_OPTS"
          echo "Firebase Token Provided: ${{ secrets.FIREBASE_TOKEN != '' }}"
          echo "Project Path: SiteBuilderMobile/composeApp"
          echo "=============================="

      # 4. Provide Play Store service account key
      - name: Set up Google Play credentials
        run: |
          cd SiteBuilderMobile/composeApp
          echo "${{ secrets.GOOGLE_PLAY_JSON_KEY }}" | base64 --decode > playstore_key.json

      # 5. Build Android via Fastlane
      - name: Run Android Fastlane Lane
        run: |
          cd SiteBuilderMobile/composeApp
          fastlane android ${{ github.event.inputs.android_lane || 'beta' }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

      # 6. Build iOSArm64 framework
      - name: Build iOSArm64 Framework
        run: |
          cd SiteBuilderMobile
          ./gradlew :composeApp:linkReleaseFrameworkIosArm64 -x kspKotlinIosArm64 -b build.gradle.kts

      # 7. Copy the framework
      - name: Copy ComposeApp.framework
        run: |
          FRAMEWORK_SRC="SiteBuilderMobile/composeApp/build/bin/iosArm64/releaseFramework/ComposeApp.framework"
          FRAMEWORK_DEST="SiteBuilderMobile/iosApp/Frameworks"

          echo "Looking for framework at: $FRAMEWORK_SRC"
          if [ -d "$FRAMEWORK_SRC" ]; then
            mkdir -p "$FRAMEWORK_DEST"
            cp -R "$FRAMEWORK_SRC" "$FRAMEWORK_DEST"
            echo "Copied ComposeApp.framework to $FRAMEWORK_DEST"
            ls -la "$FRAMEWORK_DEST"
          else
            echo "ComposeApp.framework not found at $FRAMEWORK_SRC"
            exit 1
          fi

      # 8. Install CocoaPods
      - name: Install Pods
        run: |
          cd SiteBuilderMobile/iosApp
          pod install

      # 9. Install Apple certificate and provisioning profiles
      - name: Install certs & provisioning profiles
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_P12 }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_DEV_MOBILEPROVISION: ${{ secrets.IOS_MOBILEPROVISION }}
          IOS_APPSTORE_MOBILEPROVISION: ${{ secrets.IOS_MOBILEPROVISION_APPSTORE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "--- Decoding secrets ---"
          CERT_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_DEV_PATH=$RUNNER_TEMP/dev.mobileprovision
          PP_APPSTORE_PATH=$RUNNER_TEMP/appstore.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERT_PATH
          echo -n "$IOS_DEV_MOBILEPROVISION" | base64 --decode -o $PP_DEV_PATH
          echo -n "$IOS_APPSTORE_MOBILEPROVISION" | base64 --decode -o $PP_APPSTORE_PATH

          echo "--- Creating temp keychain ---"
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo "--- Importing certificate ---"
          security import $CERT_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          echo "--- Installing provisioning profiles ---"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_APPSTORE_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          echo "--- Installed provisioning profiles ---"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles

      # 9.1. Echo iOS build info
      - name: Log iOS Build Context
        run: |
          echo "=============================="
          echo "iOS Build Information"
          echo "Fastlane Lane: ${{ github.event.inputs.ios_lane || 'beta' }}"
          echo "Provisioning Profiles Installed:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles || echo "No profiles found!"
          echo "Keychains:"
          security list-keychains
          echo "=============================="


      # 10. Run iOS Fastlane Lane
      - name: Run iOS Fastlane Lane
        run: |
          cd SiteBuilderMobile/iosApp
          fastlane ios ${{ github.event.inputs.ios_lane || 'beta' }}
          echo "IPA files after Fastlane run:"
          find ./deploy -name "*.ipa" || echo "No IPA found"
          ls -la ./deploy || true
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      # 11.0. Echo artifact summary before upload
      - name: Log Artifact Summary
        run: |
          echo "=============================="
          echo "Artifact Summary"
          echo "Expected Android Lane: ${{ github.event.inputs.android_lane || 'beta' }}"
          echo "Expected iOS Lane: ${{ github.event.inputs.ios_lane || 'beta' }}"
          echo "Searching for build outputs..."
          find SiteBuilderMobile -type f \( -name "*.apk" -o -name "*.aab" -o -name "*.ipa" \)
          echo "=============================="

      # 11.1. Upload to S3
      - name: Upload APK/AAB & IPA to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -ex
          IPA_PATH="SiteBuilderMobile/iosApp/deploy/iosApp.ipa"

          # Pick correct Android artifact path
          if [ "${{ github.event.inputs.android_lane }}" = "release" ]; then
            ANDROID_PATH="SiteBuilderMobile/composeApp/build/outputs/bundle/release/composeApp-release.aab"
          else
            ANDROID_PATH="SiteBuilderMobile/composeApp/build/outputs/apk/debug/composeApp-debug.apk"
          fi

          S3_PATH="s3://${{ env.S3_BUCKET_NAME }}/$(date +%Y-%m-%d)/"

          echo "=============================="
          echo "Uploading artifacts to: $S3_PATH"
          echo "=============================="

          echo "Uploading iOS IPA..."
          if [ -f "$IPA_PATH" ]; then
            aws s3 cp "$IPA_PATH" "$S3_PATH"
            echo "Uploaded IPA successfully"
          else
            echo "IPA not found at $IPA_PATH"
          fi

          echo "Uploading Android artifact..."
          if [ -f "$ANDROID_PATH" ]; then
            aws s3 cp "$ANDROID_PATH" "$S3_PATH"
            echo "Uploaded Android artifact successfully"
          else
            echo "Android artifact not found at $ANDROID_PATH"
          fi

          echo "=============================="
          echo "Upload step completed"
          echo "=============================="



