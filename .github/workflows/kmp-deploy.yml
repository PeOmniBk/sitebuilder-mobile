name: KMP Deploy from Bitbucket

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  CI_PROVIDER: GITHUB
  PROJECT_ROOT_DIR: "./SiteBuilderMobile"
  S3_BUCKET_NAME: imal-apk-bucket
  GRADLE_OPTS: "-Xmx4g -Dorg.gradle.jvmargs='-Xmx4g -XX:MaxMetaspaceSize=1g'"

jobs:
  deploy:
    runs-on: macos-14
    steps:

      # 0. Debug: Show available Xcode versions and switch to 16.x
      - name: Show available Xcode versions
        run: ls /Applications | grep Xcode

      - name: Select Xcode 16.x
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app
          xcodebuild -version

      # 1. Set up SSH and clone Bitbucket repo
      - name: Setup SSH for Bitbucket
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BITBUCKET_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts

      - name: Clone Bitbucket Repository
        run: |
          git clone git@bitbucket.org:azentio-software/site-builder-execution.git
          mv site-builder-execution/SiteBuilderMobile SiteBuilderMobile

      # 2. Set up Android + Fastlane environment
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane
        run: gem install fastlane

      - name: Ensure AWS CLI is Installed
        run: |
          if ! command -v aws &> /dev/null; then
           brew install awscli
          else
           echo "AWS CLI already installed"
          fi

      # 3. Gradle clean
      - name: Clean Project
        run: ./SiteBuilderMobile/gradlew clean -p SiteBuilderMobile -b build.gradle.kts

      # 4. Build Android via Fastlane
      - name: Run Android Fastlane Beta Lane
        run: |
          cd SiteBuilderMobile/composeApp
          fastlane android beta
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      # 5. Build iOSArm64 framework
      - name: Build iOSArm64 Framework
        run: |
          cd SiteBuilderMobile
          ./gradlew :composeApp:linkDebugFrameworkIosArm64 -x kspKotlinIosArm64 -b build.gradle.kts

      # 6. Copy the framework
      - name: Copy ComposeApp.framework
        run: |
          FRAMEWORK_SRC="SiteBuilderMobile/composeApp/build/bin/iosArm64/debugFramework/ComposeApp.framework"
          FRAMEWORK_DEST="SiteBuilderMobile/iosApp/Frameworks"
          if [ -d "$FRAMEWORK_SRC" ]; then
            mkdir -p "$FRAMEWORK_DEST"
            cp -R "$FRAMEWORK_SRC" "$FRAMEWORK_DEST"
            echo "Copied ComposeApp.framework to $FRAMEWORK_DEST"
          else
            echo "ComposeApp.framework not found"
            exit 1
          fi

      # 7. Install CocoaPods
      - name: Install Pods
        run: |
          cd SiteBuilderMobile/iosApp
          pod install

      # 8. Install Apple certificate and provisioning profile (manual)
      - name: Install certs & provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_P12 }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_MOBILEPROVISION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "--- Decoding secrets ---"
          CERT_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERT_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo "Cert size: $(wc -c < $CERT_PATH)"
          echo "Profile size: $(wc -c < $PP_PATH)"

          echo "--- Creating temp keychain ---"
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo "--- Importing certificate ---"
          security import $CERT_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          echo "--- Installing provisioning profile ---"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          echo "--- Installed provisioning profiles ---"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles
          for f in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "----- $f -----"
            security cms -D -i "$f" | grep -A2 -E "<key>Name</key>|<key>UUID</key>"
          done

      # 9. Run iOS Fastlane Lane
      - name: Run iOS Fastlane Beta Lane
        run: |
          cd SiteBuilderMobile/iosApp
          fastlane ios beta
          echo "IPA files after Fastlane run:"
          find ../deploy -name "*.ipa" || echo "No IPA found"
          ls -la ../deploy || true
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      # 10. Upload to S3
      - name: Upload APK & IPA to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -ex
          IPA_PATH="SiteBuilderMobile/iosApp/deploy/iosApp.ipa"
          APK_PATH="SiteBuilderMobile/composeApp/build/outputs/apk/debug/composeApp-debug.apk"
          S3_PATH="s3://${{ env.S3_BUCKET_NAME }}/$(date +%Y-%m-%d)/"

          echo "Uploading IPA to $S3_PATH"
          if [ -f "$IPA_PATH" ]; then
            aws s3 cp "$IPA_PATH" "$S3_PATH"
          else
            echo "IPA not found at $IPA_PATH"
            echo "Searching for IPA under SiteBuilderMobile:"
            find SiteBuilderMobile -name "*.ipa"
          fi

          echo "Uploading APK to $S3_PATH"
          if [ -f "$APK_PATH" ]; then
            aws s3 cp "$APK_PATH" "$S3_PATH"
          else
            echo "APK not found at $APK_PATH"
          fi

